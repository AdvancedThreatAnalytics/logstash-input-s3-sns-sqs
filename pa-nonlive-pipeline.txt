input {
  s3snssqs {
    region                     => "eu-central-1"
    queue                      => "logingest-live-queue--pa-nonlive-981635780980-nonlive-alb-logs-logs"
    threads                    => 2
    queue_owner_aws_account_id => "239710123532"
    type                       => "pa-alb-nonlive"
    tags                       => ["pa-alb-nonlive"]
    id                         => "pa-alb-nonlive"
    codec                      => json_stream
    s3_options_by_bucket => [
      {
        "bucket_name" => "de-otto-alb-logs-951635780980-eu-central-1"
        "credentials" => { role => "arn:aws:iam::981635780980:role/logmon-nonlive-alb" }
        "folders"     => [
          {
            "key"     => "alb-logs"
            "codec"   => "multiline" {
              "pattern" => "\*+\s+<< %{WORD}\s+>>\s+%{NUMBER}"
              "negate"  => "true"
              "what"    => "previous"
            }
          }
        ]
      }
    ]
  }
}

filter {
  if ([@metadata][s3][bucket_name] == "de-otto-alb-logs-981635780980-eu-central-1") {
    if ([@metadata][s3][object_folder] and !([@metadata][s3][object_folder] =~ /%{.*}/)) {
      mutate {
        replace => { "type" => "%{[@metadata][s3][object_folder]}" }
      }
    }

    split {
        field => "[message]"
    }

    grok {
        match => ["message", "%{NOTSPACE:request_type} %{TIMESTAMP_ISO8601:timestamp} %{NOTSPACE:alb-name} %{NOTSPACE:client} %{NOTSPACE:target} %{NOTSPACE:request_processing_time:float} %{NOTSPACE:target_processing_time:float} %{NOTSPACE:response_processing_time:float} %{NOTSPACE:elb_status_code:int} %{NOTSPACE:target_status_code} %{NOTSPACE:received_bytes:float} %{NOTSPACE:sent_bytes:float} %{QUOTEDSTRING:request} %{QUOTEDSTRING:user_agent} %{NOTSPACE:ssl_cipher} %{NOTSPACE:ssl_protocol} %{NOTSPACE:target_group_arn} %{QUOTEDSTRING:trace_id}"]
    }

    if [elb_status_code] < 400 and [request] !~ "\/user\/login"{
      drop {}
    }

    date {
      match => ["timestamp", "ISO8601"]
      target => "@timestamp"
      remove_field => ["timestamp"]
    }

    mutate {
      gsub => [
        "request", '"', "",
        "trace_id", '"', "",
        "user_agent", '"', ""
      ]
    }
    grok {
        match => ["request", "(%{NOTSPACE:http_method})? (%{NOTSPACE:http_uri})? (%{NOTSPACE:http_version})?"]
    }
    grok {
        match => ["http_uri", "(%{WORD:protocol})?(://)?(%{IPORHOST:domain})?(:)?(%{INT:http_port})?(%{GREEDYDATA:request_uri})?"]
    }
    grok {
        match => ["client", "(%{IPORHOST:c_ip})?"]
    }
    grok {
        match => ["client", "(:)(%{POSINT:c_port})?"]
    }
    #geoip {
    #    source => "c_ip"
    #}

    mutate {
      replace =>  { "type" => "alblogs"}
    }

    mutate {
      remove_field => [ "message", "alb-name", "client","http_port", "domain", "http_method", "protocol", "request*", "response*", "ssl_protocol", "target", "target_group_arn" ]
    }
  }


  else if ([@metadata][s3][bucket_name] == "de-otto-shozu-nonlive-981635780980-eu-central-1-waf-log") {
    if ([@metadata][s3][object_folder] and !([@metadata][s3][object_folder] =~ /%{.*}/)) {
      #mutate {
      #  replace => { "type" => "%{[@metadata][s3][object_folder]}" }
      #}
    }


    #mutate {
    #  remove_field => [ "message", "alb-name", "client","http_port", "domain", "http_method", "protocol", "request*", "response*", "ssl_protocol", "target", "target_group_arn" ]
    #}
  }

  else {
	  varnishlog{
	    blacklist_sections => ["VCL_Log\s+track",'ReqHeader\s+Cookie']
	    normalize_fieldnames => true
	  }
	  kv {
	    source              => "VclLog"
	    value_split_pattern => "\s*:\s*"
	  }
      mutate {
        remove_field => [ "message", "protocol", "reason" ]
      }
	  date {
	    target => "@timestamp"
	    match => [ "TimestampStart", "UNIX" ]
	  }
	  mutate {
	    add_field => {
	      "host"  => "%{[@metadata][s3][object_key]}"
	    }
	    rename => {
	        "Referer"         => "referer"
	        "XCountry"        => "country"
	        "XHttp2"          => "http2"
	        "XState"          => "state"
	        "ContentType"     => "content_type"
	        "XVarnish"        => "x-varnish"
	        "UserAgent"       => "user_agent"
	        "disp"            => "cache_hit"
	        "XRealIp"         => "client_ip"
	        "XBackend"        => "backend_vertical"
	        "XEsiLevel"       => "esi_level"
	        "Vary"            => "vary"
	        "VSL"             => "vsl"
	        "FetchError"      => "fetch_error"
	        "XOriginalUrl"    => "url_original"
	        "hits"            => "cache_hits"
	        "XTeam"           => "team"
	        "XOrganisation"   => "organisation"
	        "XRealSourcePort" => "client_port"
	        "XIsp"            => "isp"
	        "XAmznTraceId"    => "amazon_id"
	        "XRealIP"         => "xrealip"
	    }
	  }
	  mutate {
	    gsub      => [
	        "backend_vertical", "_.*", "",
	        "host", "^requestlogs_ip-(\d+)-(\d+)-(\d+)-(\d+).*$", "\1.\2.\3.\4"
	    ]
	    lowercase => [ "backend_vertical" ]
	    convert => {
	        "bytes"       => "integer"
	        "cache_hits"  => "integer"
	        "esi_level"   => "integer"
	        "xid"         => "integer"
	        "client_port" => "integer"
	        "grace"       => "float"
	        "ttl"         => "float"
	    }
	  }

	  fingerprint {
	        source       => [ "client_ip" ]
	        target       => "client_ip_anonym"
	        method       => "SHA512"
	        key          => 'o33olKwpet3r456'
	        base64encode => true
	  }
      fingerprint {
	        source       => [ "browserId" ]
	        target       => "browserId_anonym"
	        method       => "SHA512"
	        key          => 'o33olKwpet3r456'
	        base64encode => true
	  }
      fingerprint {
	        source       => [ "visitorId" ]
	        target       => "visitorId_anonym"
	        method       => "SHA512"
	        key          => 'o33olKwpet3r456'
	        base64encode => true
	  }
      fingerprint {
	        source       => [ "client_port" ]
	        target       => "client_port_anonym"
	        method       => "SHA512"
	        key          => 'o33olKwpet3r456'
	        base64encode => true
	  }
      fingerprint {
	        source       => [ "url" ]
	        target       => "url_anonym"
	        method       => "SHA512"
	        key          => 'o33olKwpet3r456'
	        base64encode => true
	  }
      fingerprint {
	        source       => [ "url_param" ]
	        target       => "url_param_anonym"
	        method       => "SHA512"
	        key          => 'o33olKwpet3r456'
	        base64encode => true
	  }
	  if ![x-origin] {
	        mutate {
	            rename => { "XOrigin" => "x-origin" }
	        }
	  }
	  grok {
	        break_on_match => false
	        match          => {
	            "url"   => "^(?<url_path>(?<url_path_3>(?<url_path_2>(?<url_path_1>/[^/?]*)(?<url_part_2>/[^/?]*)?)(?<url_part_3>/[^/?]*)?)(?<url_part_remains>[^?]*))(?:%{URIPARAM:url_param})?$"
	            "begin" => "^(be)?req %{NUMBER:xid_parent} %{WORD:cause}$"
	        }
	  }

	  ## currently September 2016 nobody wants these
	  if [url_path_1] == "ts-rcv" {
	      drop {}
	  }
	  mutate {
	    add_field    => { "first_url_part" => "%{url_path_1}" }
	    remove_field => [ "begin" ]
	    convert      => { "xid_parent" => "integer" }
	  }

	  mutate {
	        gsub => [ "first_url_part", "^/", "" ]
	  }
	  if [type] == "request" {
	    mutate {
	        split     => { "TimestampRespRaw" => " " }
	        add_field => {
	            "req_runtime" => "%{TimestampRespRaw[1]}"
	        }
	    }
	    mutate {
	        convert => {
	            "req_runtime" => "float"
	        }
	    }
	  }
	  else if [type] == "bereq" {
	    if [TimestampBerespbodyRaw] {
	        mutate {
	            split     => { "TimestampBerespbodyRaw" => " " }
	            add_field => {
	                "be_runtime" => "%{TimestampBerespbodyRaw[1]}"
	            }
	        }
	    }
	    else if [TimestampErrorRaw] {
	        mutate {
	            split     => { "TimestampErrorRaw" => " " }
	            add_field => {
	                "be_runtime" => "%{TimestampErrorRaw[1]}"
	            }
	        }
	    }
	    else if [TimestampRetryRaw] {
	        mutate {
	            split     => { "TimestampRetryRaw" => " " }
	            add_field => {
	                "be_runtime" => "%{TimestampRetryRaw[1]}"
	            }
	        }
	    }
	    mutate {
	        split     => { "TimestampBerespRaw" => " " }
	        add_field => {
	            "be_wait" => "%{TimestampBerespRaw[2]}"
	        }
	    }
	    mutate {
	        convert => {
	            "be_runtime" => "float"
	            "be_wait"    => "float"
	        }
	    }
	  }
	  prune {
	    blacklist_names => [ "^[A-Z]" ]
	  }
  }

  mutate {
    add_field => {
    "meta-s3bucketname" => "%{[@metadata][s3][bucket_name]}"
    "meta-s3objectkey" => "%{[@metadata][s3][object_key]}"
    "meta-s3objectfolder" => "%{[@metadata][s3][object_folder]}"
    }
    lowercase => [ "type" ]
  }


}

output {
  if ([type] in ["request", "bereq"]) {
    elasticsearch {
      hosts    => ["https://es-pa-nonlive.live.logmon.cloud.otto.de:9243"]
      index    => "%{type}_write"
      user     => "elastic"
      password => "${elastic_password}"
    }
  } else {
    elasticsearch {
      hosts    => ["https://es-pa-nonlive.live.logmon.cloud.otto.de:9243"]
      index    => "%{type}-%{+YYYY.MM.dd}"
      user     => "elastic"
      password => "${elastic_password}"
    }
  }

#  elasticsearch {
#    hosts    => ["https://es-pa-nonlive.live.logmon.cloud.otto.de:9243"]
#   index    => "%{type}-%{+YYYY.MM.dd}"
#   user     => "elastic"
#   password => "${elastic_password}"
# }
}
